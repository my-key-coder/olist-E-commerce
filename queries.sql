-- 1. Basic customer behavior
-- Number of unique customers
SELECT DISTINCT
	COUNT(CUSTOMER_ID) AS TOTAL_CUSTOMERS
FROM
	CUSTOMERS;



-- Number of order per customers
SELECT
	CUSTOMER_ID,
	COUNT(ORDER_ID) AS TOTAL_ORDERS
FROM
	ORDERS
GROUP BY
	CUSTOMER_ID;



-- Average review score per customer
SELECT
	O.CUSTOMER_ID,
	ROUND(AVG(R.REVIEW_SCORE), 2) AS AVERAGE_REVIEW_SCORE
FROM
	ORDERS O
	JOIN ORDER_REVIEW R ON O.ORDER_ID = R.ORDER_ID
GROUP BY
	O.CUSTOMER_ID;



-- Payment method behavior
SELECT
	P.PAYMENT_TYPE AS PAYMENT_METHOD,
	COUNT(O.CUSTOMER_ID) AS TOTAL_CUSTOMERS
FROM
	ORDER_PAYMENTS P
	JOIN ORDERS O ON P.ORDER_ID = O.ORDER_ID
GROUP BY
	PAYMENT_METHOD
ORDER BY
	TOTAL_CUSTOMERS DESC;



-- 2. Spending behavior
-- Total and average payment per order
SELECT
	ORDER_ID,
	SUM(PAYMENT_VALUE) AS TOTAL_PAYMENT
FROM
	ORDER_PAYMENTS
GROUP BY
	ORDER_ID;



-- Total spending per customer
SELECT
	O.CUSTOMER_ID,
	SUM(P.PAYMENT_VALUE) AS TOTAL_SPENT
FROM
	ORDERS O
	JOIN ORDER_PAYMENTS P ON O.ORDER_ID = P.ORDER_ID
GROUP BY
	O.CUSTOMER_ID
ORDER BY
	TOTAL_SPENT DESC;



-- 3. Delivery and Timelines
-- Delivery time(estimated vs actual)
SELECT
	ORDER_ID,
	ORDER_ESTIMATED_DELIVERY_DATE,
	ORDER_DELIVERED_CUSTOMER_DATE,
	DATE (ORDER_DELIVERED_CUSTOMER_DATE) - DATE (ORDER_ESTIMATED_DELIVERY_DATE) AS DELIVERY_DELAY_DAYS,
	CASE
		WHEN DATE (ORDER_DELIVERED_CUSTOMER_DATE) - DATE (ORDER_ESTIMATED_DELIVERY_DATE) < 0 THEN 'Early'
		WHEN DATE (ORDER_DELIVERED_CUSTOMER_DATE) - DATE (ORDER_ESTIMATED_DELIVERY_DATE) > 0 THEN 'Late'
		ELSE 'On time'
	END AS DELIVERY_STATUS
FROM
	ORDERS
WHERE
	ORDER_STATUS = 'delivered';




-- Top categories by number of orders
SELECT
	P.PRODUCT_CATEGORY_NAME AS CATEGORY,
	COUNT(O.ORDER_ID) TOTAL_ORDER
FROM
	PRODUCTS P
	JOIN ORDER_ITEMS O ON P.PRODUCT_ID = O.PRODUCT_ID
GROUP BY
	CATEGORY
ORDER BY
	TOTAL_ORDER DESC
LIMIT
	10;



-- Average order value per customer
SELECT
	O.CUSTOMER_ID,
	COUNT(DISTINCT O.ORDER_ID) AS TOTAL_ORDERS,
	SUM(P.PAYMENT_VALUE) AS TOTAL_SPENT,
	ROUND(
		SUM(P.PAYMENT_VALUE) / COUNT(DISTINCT O.ORDER_ID),
		2
	) AS AVG_ORDER_VALUE
FROM
	ORDERS O
	JOIN ORDER_PAYMENTS P ON O.ORDER_ID = P.ORDER_ID
GROUP BY
	O.CUSTOMER_ID
ORDER BY
	AVG_ORDER_VALUE DESC;




-- Cluster customer behavior
WITH
	ORDER_SUMMARY AS (
		SELECT
			O.CUSTOMER_ID,
			COUNT(DISTINCT O.ORDER_ID) AS TOTAL_ORDERS,
			SUM(P.PAYMENT_VALUE) AS TOTAL_SPENT,
			ROUND(
				SUM(P.PAYMENT_VALUE) / COUNT(DISTINCT O.ORDER_ID),
				2
			) AS AVG_ORDER_VALUE
		FROM
			ORDERS O
			JOIN ORDER_PAYMENTS P ON O.ORDER_ID = P.ORDER_ID
		GROUP BY
			O.CUSTOMER_ID
		ORDER BY
			AVG_ORDER_VALUE DESC
	),
	REVIEW_SUMMARY AS (
		SELECT
			O.CUSTOMER_ID,
			ROUND(AVG(R.REVIEW_SCORE), 2) AS AVG_REVIEW_SCORE
		FROM
			ORDERS O
			JOIN ORDER_REVIEW R ON O.ORDER_ID = R.ORDER_ID
		GROUP BY
			O.CUSTOMER_ID
	)
SELECT
	OS.CUSTOMER_ID,
	TOTAL_ORDERS,
	TOTAL_SPENT,
	AVG_ORDER_VALUE,
	AVG_REVIEW_SCORE
FROM
	ORDER_SUMMARY OS
	JOIN REVIEW_SUMMARY RS ON OS.CUSTOMER_ID = RS.CUSTOMER_ID;




-- Seller with most delayed orders
WITH SELLERS_behavior AS (
    SELECT
        S.SELLER_ID,
        EXTRACT(DAY FROM O.ORDER_DELIVERED_CUSTOMER_DATE - O.ORDER_ESTIMATED_DELIVERY_DATE) AS DELAYED_DAYS,
        CASE
            WHEN O.ORDER_DELIVERED_CUSTOMER_DATE > O.ORDER_ESTIMATED_DELIVERY_DATE THEN 'Late'
            WHEN O.ORDER_DELIVERED_CUSTOMER_DATE < O.ORDER_ESTIMATED_DELIVERY_DATE THEN 'Early'
            ELSE 'On time'
        END AS DELIVERY_STATUS
    FROM
        ORDERS O
        JOIN ORDER_ITEMS OI ON OI.ORDER_ID = O.ORDER_ID
        JOIN SELLERS S ON OI.SELLER_ID = S.SELLER_ID
)
SELECT
    SELLER_ID,
    COUNT(*) AS TOTAL_DELAYED_ORDERS
FROM
    SELLERS_behavior
WHERE
    DELIVERY_STATUS = 'Late'
GROUP BY
    SELLER_ID
ORDER BY
    TOTAL_DELAYED_ORDERS DESC;




-- Sellers with longest delivery time
SELECT
	S.SELLER_ID,
	ROUND(
		AVG(
			EXTRACT(
				DAY
				FROM
					(
						O.ORDER_DELIVERED_CUSTOMER_DATE - O.ORDER_ESTIMATED_DELIVERY_DATE
					)
			)
		),
		2
	) AS AVG_DELAY_DAYS
FROM
	ORDERS O
	JOIN ORDER_ITEMS OI ON OI.ORDER_ID = O.ORDER_ID
	JOIN SELLERS S ON OI.SELLER_ID = S.SELLER_ID
WHERE
	O.ORDER_STATUS = 'delivered'
GROUP BY
	S.SELLER_ID
ORDER BY
	AVG_DELAY_DAYS DESC
LIMIT
	10;



-- Category profitability
SELECT
	P.PRODUCT_CATEGORY_NAME,
	SUM(OI.PRICE + OI.FREIGHT_VALUE) AS TOTAL_REVENUE
FROM
	ORDER_ITEMS OI
	JOIN PRODUCTS P ON OI.PRODUCT_ID = P.PRODUCT_ID
GROUP BY
	P.PRODUCT_CATEGORY_NAME
ORDER BY
	TOTAL_REVENUE DESC;




-- Total revenue per month
SELECT
	TO_CHAR(
		DATE_TRUNC('month', O.ORDER_PURCHASE_TIMESTAMP),
		'YYYY-MM'
	) AS YEAR_MONTH,
	SUM(OI.PRICE + OI.FREIGHT_VALUE) AS TOTAL_REVENUE
FROM
	ORDER_ITEMS OI
	JOIN ORDERS O ON OI.ORDER_ID = O.ORDER_ID
WHERE
	EXTRACT(
		YEAR
		FROM
			O.ORDER_PURCHASE_TIMESTAMP
	) IN (2017, 2018)
GROUP BY
	YEAR_MONTH
ORDER BY
	YEAR_MONTH;


-- Top category by revenue
SELECT
	P.PRODUCT_CATEGORY_NAME AS CATEGORY,
	SUM(OI.PRICE + OI.FREIGHT_VALUE) AS TOTAL_REVENUE
FROM
	PRODUCTS P
	JOIN ORDER_ITEMS OI ON OI.PRODUCT_ID = P.PRODUCT_ID
GROUP BY
	CATEGORY
ORDER BY
	TOTAL_REVENUE DESC
LIMIT
	10;



-- Repeat customers
WITH
	CUSTOMER_ORDER AS (
		SELECT
			CUSTOMER_ID,
			COUNT(ORDER_ID) AS NUMBER_OF_ORDERS
		FROM
			ORDERS
		GROUP BY
			CUSTOMER_ID
	)
SELECT
	ROUND(
		100 * COUNT(
			CASE
				WHEN NUMBER_OF_ORDERS > 1 THEN 1
			END
		) / COUNT(*),
		2
	) AS REPEAT_PERCENTAGE
FROM
	CUSTOMER_ORDER;



-- Revenue by customer state
SELECT
	C.CUSTOMER_STATE AS STATE,
	SUM(OI.PRICE + OI.FREIGHT_VALUE) AS TOTAL_REVENUE
FROM
	CUSTOMERS C
	JOIN ORDERS O ON O.CUSTOMER_ID = C.CUSTOMER_ID
	JOIN ORDER_ITEMS OI ON OI.ORDER_ID = O.ORDER_ID
GROUP BY
	STATE
ORDER BY
	TOTAL_REVENUE DESC;
